
* Low-cost, automated microscope with machine vision

*This page describes how to build an automated inverted 3d printed microscope for observing microfluidics chips.*

This is a [[https://www.plus.ac.at/biowissenschaften/der-fachbereich/arbeitsgruppen/lepperdinger/spoc-labs/][SPOC lab]] project. Original source code of the project
is provided under MIT License. The source may contain code under a different license, if this is the case it is stated in the LICENSE file.

If not stated otherwise, the designs and documentation in this repository
is Copyright (c) 2021 Georg Auer,
and made available under a
[[https://creativecommons.org/licenses/by/4.0/][Creative Commons Attribution 4.0 International (CC BY 4.0)]] License.


#+CAPTION: Image of the 3D-printed version of the pump.
[[images/3dprinted_microscope.jpg]]
#+BEGIN_QUOTE
Image of the 3D-printed microscope.
#+END_QUOTE


** Introduction

Das Mikroskop ist so entworfen, dass es möglichst günstig und schnell herstellbar ist,
und trotzdem eine hohe Genauigkeit erreicht. Durch die gewählte Delta-Kinematik
hat das Gerät einen sehr kleinen Fußabdruck, und ist auch dafür geeignet in einem
Inkubator verwendet zu werden. Im SPOC labor wird das Mikroskop verwendet,
um die Erzeugung von Spheroiden in selbst konstruierten Chips beobachten und
überwachen zu können.
Die Mikroskopsteuerung kann direkt vorgenommen werden,
oder auch automatisiert über ein Programm iterativ ein Experiment beobachten.

The microscope is designed to be as cheap and quick to manufacture as possible,
and still achieve high accuracy. Due to the chosen delta kinematics
the device has a very small footprint, and is also suitable for use in an incubator.
incubator. In the SPOC lab, the microscope is used
to observe and monitor the generation of spheroids in self-constructed chips.
monitor the process. The microscope can be controlled directly
or automated via a program to iteratively observe an experiment.


** Mechanics - Files and Bill of Materials   

*** Pump Design files (openSCAD)

The microscope model was designed in openSCAD in parametric form.
For each part, an stl file was created and all files where then sliced
with Prusa Slicer and sent to print on an 3D filament printer (Prusa MK3).
For the ease of reproduction of the slicer files are also saved within the directory.

#+CAPTION: A screenshot of the microscope in openSCAD (for the file see [[./files/SyringePump3Dmodel.scad]]).
[[images/openscad-microscope.jpg]]
#+BEGIN_QUOTE
A screenshot of the pump in openSCAD (for the file see
[[./files/SyringePump3Dmodel.scad]]).
#+END_QUOTE


*** Bill of Materials

- this list is for one microscope. Cost of components
  is approximate.

| item [3X Syringe Pumps]                                        |      number | purpose               | bought from   |  part-no | approx  (£/euro) |
|----------------------------------------------------------------+-------------+-----------------------+---------------+----------+-------------|
| Allegro A4983 Based Stepper Boards: here the 'Big Easy Driver' |           3 | stepper board         | Technobots    | 2900-445 | ~ 70        |
| Nema 17 Steppers (0..9° 2.4A)                                  |           3 | stepper motor         | act-motor     | 1402-050 | ~ 80        |
| Teensy 4.0 or 4.1 Microcontroller                              |           1 | control               | cpc-Farnell   |  SC13539 | ~ 20        |
| Fine Hex Adjuster, 1/4"-80, 4" Long                            |           3 | leadscrew             | Thorlabs      | F25SS400 | ~ 40        |
| Locking Phosphor-Bronze Bushing with Nut, 1/4"-80, L=0.50"     |           3 | leadscrewnut          | Thorlabs      |   N80L6P | ~ 28        |
| Silver Steel 6mm x 333mm                                       |         ?16 | pump structure        | Technobots    | 4426-006 | ~ 35        |
| Zinc Collets 6mm pk/4                                          |         ?24 | fasteners             | Technobots    | 4609-060 | ~ 28        |
| Linear Bearing LM6UU 6mm Bushing                               |         ?16 | slides motorpart      | Technobots    | 4604-606 | ~ 16        |
| Universal Coupling Body                                        |           3 | motor-screw-connector | Technobots    | 4604-050 | ~ 12        |
| Universal Coupling Insert - 5mm                                |           3 | motor-side            | Technobots    | 4604-059 | ~ 8         |
| Universal Coupling Insert - 1/4"                               |           3 | screw-side            | Technobots    | 4604-066 | ~ 8         |
| OTHER SMALL ITEMS                                              |             |                       |               |          |             |
| 95mm x 127mm Copper Clad Stripboard (or bigger)                |           1 | mount for electronics | Technobots    |          | ~ 2         |
| Male & Female PCB Headers 2.45mm pitch                         |        some | simple connectors     | cpc-Farnell   |          | ~ 10        |
| Screws M3 (25mm): to mount motors                              |          16 |                       | Technobots    | 4300-006 | ~ 3 for 100 |
| Screws M3 (<10mm), optional                                    |        many | fix collets better    | Technobots    | 4300-002 | ~ 2 for 100 |
| Screws M6 (~100mm), syringe part lasercut version              |           8 | reduces acrylic       | hardware shop |          |             |
| USB (micro) cable                                              |           1 |                       | cpc-Farnell   |          | ~ 3         |
| 6 wire colored ribbon cable                                    |          4m |                       | Technobots    |          | ~ 3         |
| 12V/>=5A power supply                                          |           1 |                       | cpc-farnell   |          | ~ 20        |
| 197 g 3D-printer filament (PLA 1.75mm)                         | 1kg/5sheets | microscope structure  | 3d jake       |          | ~ 5         |
| USA Digital Microscope 40x-1000x                               |           1 | microscope camera     | Bysameyee     |          | ~ 20        |
|----------------------------------------------------------------+-------------+-----------------------+---------------+----------+-------------|
|                                                                |             |                       |               |          | ~        |

**** Companies:
- Technobots:  http://www.technobotsonline.com
- Thorlabs:    http:/www.thorlabs.com
- CPC-Farnell: http://cpc.farnell.com/
- RS:          http://uk.rs-online.com/web/
- Techsoft:    http://www.techsoft.co.uk/
- Maplin:      http://www.maplin.co.uk

All components but the optics-screws (Thorlabs) can be obtained
commercially. If other leadscrews are used, the software has to be
adapted to the distance/revolution grading.

**** Machines (and/or):
- FDM 3D-printer (we use an Prusa MK3, but any model with an similar precision would do)

**** Tools:
- Soldering iron
- Hand tools (screwdrivers etc.)

** Mechanical Assembly 

**** Pre-Assembly of Parts
***** Motor Part
- tin the leads of the motors with solder, add a male
  PCB-connector (or any other connector of your choosing. On our
  motors the colored leads are GREEN, BLACK, BLUE, RED).
- we use heatshrinking tube to electrically isolate the connectors at the end.
- add the connector for the leadscrew (5mm brass insert) to the
  motor - you might not have space to do that later.

***** Leadscrew Part
- add the brass insert to connect the motor onto the leadscrew
- insert the screw VERY carefully to avoid damaging the thread which can
  happen rather easily.

#+CAPTION: Pre-assemble motor with leadscrew (bottom right) and component inventory.
[[images/MotorAssembly.jpeg]]
#+BEGIN_QUOTE
Pre-assemble motor with leadscrew (bottom right) and component inventory.
#+END_QUOTE

***** Camera
Microscope can be exchanged with an variety of solutions. We tried an Raspberry HQ Camera v1.0
with SM1 to C-mount adapter (thorlabs, SM1A9) to 1 inch optics connected to an Zeiss Plan 2,5 objective,
but eventually ended up with an 25€ USB microscope camera.

**** Assembly of the Pump

- slot the steel shafts into the assembled motor part. Take care not
  to harm the LM6UU linear bearings. 

- add endpart, leadscrew-part and syringe part. Do not forget to
  insert the collets (8 collets/part, before and after). Don't fix
  them yet.

#+CAPTION: Three pumps before adjusting the leadscrew part & fixing everything with collets.
[[images/3Pumps.jpeg]]
#+BEGIN_QUOTE
Three pumps before adjusting the leadscrew part & fixing everything
with collets.
#+END_QUOTE


- add the electronics to the motor and drive it back and forth (at
  this point you could add some lithium grease or other lubricant).
  The leadscrew-part has to be adjusted such that the turning
  leadscrew stays centered without wobble. Fix the collets
  securely.

- when finished use a bit of epoxy glue to permanently connect the
  'universal coupling body' with the brass inserts. The assembly can
  still be taken apart by loosening the grub-screws holding the motor
  shaft and the leadscrew together.
 
- done!     

** Electronics
To drive the stepper motors of the pumps we use a A4983 stepper driver
chip from Allegro Microsystems (datasheet
http://www.technobotsonline.com/Datasheets2/1518-009-A4983SETTR-T.pdf).
For convenience we use one 'Big Easy Driver' for each motor
(http://www.technobotsonline.com/big-easy-driver.html,
http://www.schmalzhaus.com/BigEasyDriver/). The 'Big Easy Driver'
boards are nice, because they default to 16 step microstepping mode,
when the 'MS1, MS2, MS3' pins are left unconnected (which means that
less soldering has to be done). With 16-step microstepping, one
revelation of the leadscrew (318 micrometer movement) is divided into
400*16=6400 steps resulting in a stable flow even at very low
flowrates. If you use a stepper with 200 steps/revolution (1.8 instead
of 0.9 degrees/step), the pumps will still work very well but you will
have to adjust the calibration in the software. The stepper drivers are controlled
with a teensy 4.0 or 4.1 microcontroller.

#+CAPTION: Left: Images of the electronics board with three stepper driver boards mounted. Right: Schematic diagram.
[[images/Electronics.jpeg]]
#+BEGIN_QUOTE
Left: Images of the electronics board with three stepper driver boards
mounted. Right: Schematic diagram.
#+END_QUOTE


*** Make the board
- solder connectors onto the driver board (e.g. PCB-connectors)

- layout the parts on a stripboard and drill holes so that you can
  mount the board with screws to an enclosure (e.g. from laser-cut
  acrylic).

- solder female PCB-connectors on the board for the teensy and the
  stepper boards (don't forget to cut the traces on the stripboard
  underneath).
- make all the necessary connections (see layout...)

- we made the system as simple as possible: 
  - no connection to MS1, MS2, MS3 - all are pulled high when not
    connected (means the driver defaults to 16 microstep-mode
  - no connection to sleep (slp) and reset (rst) - if powered the
    system will be on all the time. If you want to shut down the
    motors, turn off the power.
 
  - this leaves only the following connections to be made:
    - enable (en) is pulled low on all by connecting to ground (this
      is important, else the pins float).
    - shared GND between teensy and the quadstepper board (or single
      big easy drivers)
    - step-pin (stp): if high for >1 microsecond, the motor will step
    - direction-pin (dir): high/low sets the direction (if your pump
      steps the 'wrong' direction, just reverse the connections of the
      leads from (e.g. green, black, blue, red --> to red, blue,
      black, green).

  - Teensy is powered by a USB connection and the motors are powered
    separately (we use a 12V 5A power supply).


- Don't forget to adjust the current supplied to the motor with the
  small potentiometer on the stepper driver board. On max, the chip
  gets hot and the motor might have enough torque to continue beyond
  the end-stop, damaging the pump assembly.


* Software for Syringe Pumps
** Introduction - mode of operation and choice of tools

The pumps are controlled with a microcontroller (a 'teensy' 4.0 or 4.1)
and a software front end written in Pure Data (PD). The teensy
(https://www.pjrc.com/teensy/teensy31.html) is a 3.3V, 32-bit ARM
based microcontroller that is compatible with the Arduino toolchain
(https://www.arduino.cc/en/Guide/HomePage) and therefore easy to
program. The prime reason to use a teensy is the high speed USB data
transfer they allow
(https://www.pjrc.com/teensy/benchmark_usb_serial_receive.html). Apart
from controlling machinery, the teensy is well suited for data
acquisition tasks.

Pure Data (PD, https://puredata.info/) is an open source dataflow
programming language used primarily for music and video applications.
It runs on nearly every computing platform, is straightforward to
learn and can be modified 'live', which is great for microfluidics
experimentation.

The communication protocol between the microcontroller and PD is OSC
('Open Sound Control', https://www.opensoundcontrol.org). It is a very
flexible, easy to use two-way communication.

#+CAPTION: System diagram.
[[images/PumpsSoftwareWorkflow.png]]
#+BEGIN_QUOTE
System diagram.
#+END_QUOTE

** Install the Software Toolchain
*** Arduino/Teensyduino
The easiest way to program teensy microcontrollers is to use the
Arduino IDE (download:https://www.arduino.cc/en/Main/Software). For
the teensy microcontrollers to be recognised by the Arduino IDE, one
must additionally install 'Teensyduino' (download:
https://www.pjrc.com/teensy/td_download.html). There is a detailed
tutorial on software installation and its use on the webpage. Most of
the Arduino libraries are compatible with teensy, Teensyduino itself
comes with many optimized ones (full install recommended).

*** Install Pure Data (PD) 
Pure Data can be downloaded from the PD community site
(https://puredata.info/downloads) and installation is straightforward.

For Mac or Win you should choose to install PD-extended, which is
pre-packaged with many additional externals from the community (all
necessary things needed for this project should be installed per
default). PD-extended is not actively maintained any more, but still
works well. Alternatively you can use PD-Vanilla and install externals
via the 'deken'-plugin (https://github.com/pure-data/deken) as
required.

On a Linux system, you should use 'PD-L2ORK'
(http://l2ork.music.vt.edu/main/make-your-own-l2ork/software/), an
up-to-date, maintained and beautified version of PD-extended from the
'Linux Laptop Orchestra' (Virginia Tech Music Department). Beta
versions for Mac and Win are now also available. PD-L2ORK runs well on
Ubuntu, but also under Raspbian on Raspberry Pi Model 3 and 4. This
allows a small touchscreen interface to be used resulting in a
small-footprint solution.

#+CAPTION: Raspberry Pi Model 3 based to control syringe pumps.).
[[images/RaspberryPi.jpeg]]
#+BEGIN_QUOTE
Raspberry Pi Model 3 used to control syringe pumps.
#+END_QUOTE


** Setting up the System 
- program the teensy
- open the PD-program 

You can test the system without the microcontroller attached to the
pumps. If the communication works via OSC, the flow rates you transfer
(in microL/h) and the direction of movement will be mirrored in the
smaller sliders beneath the main control elements in the PD-frontend.

** How the System Works  
In der Frontend Ansteuerung im PureData werd die für die xyz Bewegung
notwendige Rotationsbewegung der einzelnen Motoren errechnet.
Diese Schrittanzahl wird nun zum Mikrokontroller geschickt,
der wiederum über das Step/Dir Protokoll den Motortreiber ansteuert.

In the frontend control in the PureData, the rotation movement of the individual
of the individual motors is calculated.
This number of steps is now sent to the microcontroller,
which in turn controls the motor driver via the Step/Dir protocol.

** Getting it to Run
*** To get a debian system to run all necessary programs, use the new-raspi.sh shell script.

#+CAPTION: Screenshot of the program. 
[[images/software_screenshot.png]]
#+BEGIN_QUOTE
Screenshot of the program. 
#+END_QUOTE

- Hit [devices], and the available serial ports will show in the
  console window. One of them is connected to the teensy. Click [open
  x[ (change the numbers by entering editing mode, ctrl-e (linux),
  cmd-e (mac)) and PD should connect to the teensy.

- upload the corresponding file to the microcontroller
  ([[./files/delta_microscope_arduino/delta_microscope_arduino.ino]]).
- place the PD-programs ([[./files/delta_microscope/delta_microscope.pd]])
 together with a little helper-program for OSC ([[./files/o.io.slipserial.pd]]) in a folder and
  open it in PD-extended or PD-L2ORK.
- The file 'delta_microscope.pd' is the software front end.
  


